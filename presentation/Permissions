//MUST ADD PERMISSIONS TO MANIFEST FIRST

// Override the onCreate method of the activity
override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)

    // Inflate the layout for this activity
    binding = ActivityMainBinding.inflate(layoutInflater)
    val view = binding.root

    // Set the content view of the activity
    setContentView(view)

    // Set an OnClickListener for the camera permission button
    binding.btnCameraPermission.setOnClickListener() {
        // Check if camera permission is already granted
        if ((ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED)) {
            // Show a toast message if permission is already granted
            Toast.makeText(this,"You already have permission for camera",Toast.LENGTH_LONG).show()
        } else {
            // Request camera permission if not already granted
            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.CAMERA), CAMERA_PERMISSION_CODE)
        }
    }
}

// Override the onRequestPermissionsResult method
override fun onRequestPermissionsResult(
    requestCode: Int,
    permissions: Array<out String>,
    grantResults: IntArray
) {
    super.onRequestPermissionsResult(requestCode, permissions, grantResults)
    
    // Check if the result is for our camera permission request
    if (requestCode == CAMERA_PERMISSION_CODE) {
        // Check if permission was granted
        if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            // Show a toast message if permission is granted
            Toast.makeText(this,"Permission granted from camera",Toast.LENGTH_SHORT)
        } else {
            // Show a toast message if permission is denied
            Toast.makeText(this,"Oops you just denied the permissions for the camera.",Toast.LENGTH_SHORT).show()
        }
    }
}

// Companion object to hold constants
companion object {
    // Define a request code for camera permission
    private const val CAMERA_PERMISSION_CODE = 1
}
